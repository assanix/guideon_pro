import asyncio
import logging
import os
from typing import Dict, Any

import openai
import motor.motor_asyncio
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InputMediaPhoto, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

load_dotenv()

# Configuration
MONGO_URI = os.getenv("MONGO_URI")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
API_TOKEN = os.getenv("API_TOKEN")

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Initialize OpenAI
openai.api_key = OPENAI_API_KEY

# Initialize MongoDB
client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_URI)
db = client["telegram_bot_db"]
users_collection = db["users"]
feedback_collection = db["feedback"]

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# Define the keyboard layouts
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞—Ä—Ç–∞üó∫Ô∏è"), KeyboardButton(text="–†–£–ü –®–ò–¢–∏–òüìö")],
        [KeyboardButton(text="–ì–¥–µ –Ø?ü´£"), KeyboardButton(text="–ù–∞–π—Ç–∏üîç"), KeyboardButton(text="ChatGPTü§ñ")],
        [KeyboardButton(text="–ñ–∞–ª–æ–±—ã/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüì•"), KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ãüí¨")]
    ],
    resize_keyboard=True
)

find_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö—É—à–∞—Ç—å"), KeyboardButton(text="–£—á–∏—Ç—å—Å—è")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

chatgpt_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# Define states
class BotStates(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_room_number = State()
    waiting_for_find_room = State()
    waiting_for_openai_question = State()

class UserManager:
    @staticmethod
    async def add_user(user_id: int):
        await users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"user_id": user_id}},
            upsert=True
        )

    @staticmethod
    async def save_feedback(user_id: int, feedback: str):
        await feedback_collection.insert_one({
            "user_id": user_id,
            "feedback": feedback
        })

    @staticmethod
    async def send_main_keyboard(user_id: int):
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_keyboard)

class OpenAIHandler:
    @staticmethod
    async def ask_openai(question: str) -> str:
        try:
            response = await openai.ChatCompletion.acreate(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": question},
                ],
                max_tokens=800,
            )
            return response.choices[0].message["content"].strip()
        except Exception as e:
            logger.error(f"Error in OpenAI request: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

class MessageHandler:
    @staticmethod
    async def send_welcome(message: types.Message):
        await UserManager.add_user(message.from_user.id)
        first_name = message.from_user.first_name
        welcome_msg = (
            f"–ü—Ä–∏–≤–µ—Ç, {first_name}! \n\n"
            f"ü§ñ –≠—Ç–æ –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ü–µ—Ä–≤–∞—à–∞ –≤ —Å—Ç–µ–Ω–∞—Ö –ö–ë–¢–£. "
            f"–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π OSIT.\n\n"
            f"üîç –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"- –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤—ã –∏–ª–∏ –∂–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
            f"- –†–∞–±–æ—á–∏–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –®–ò–¢–∏–ò\n"
            f"- –Æ–∑–∞—Ç—å ChatGPT –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ!\n"
            f"- –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –î–µ–∫–∞–Ω–∞—Ç—É –∏–ª–∏ OSIT\n"
        )
        await bot.send_message(message.from_user.id, welcome_msg, reply_markup=main_keyboard)

    @staticmethod
    async def handle_map(message: types.Message):
        maps_paths = [
            "./map/1-floor_kbtu.jpg",
            "./map/2-floor_kbtu.jpg",
            "./map/3-floor_kbtu.jpg",
            "./map/4-floor_kbtu.jpg",
            "./map/5-floor_kbtu.jpg",
        ]
        media = [InputMediaPhoto(media=FSInputFile(map_path)) for map_path in maps_paths]

        await bot.send_media_group(message.from_user.id, media)

    @staticmethod
    async def handle_contacts(message: types.Message):
        response_text = "üîí –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å ‚Äì Helpingstudents@kbtu.kz\n\n üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n- –û—Ñ–∏—Å –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: 8 727 357 42 81, d.fazylova@kbtu.kz, officeregistrar@kbtu.kz\n- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: 8 727 357 42 84 (–≤–Ω. 241), u.bafubaeva@kbtu.kz\n- –û–±—â–µ–∂–∏—Ç–∏–µ: 8 727 357 42 42 (–≤–Ω. 601), m.shopanov@kbtu.kz, a.esimbekova@kbtu.kz\n- –û–ø–ª–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: 8 727 357 42 58 (–≤–Ω. 163, 169) a.nauruzbaeva@kbtu.kz, m.aitakyn@kbtu.kz\n- –ú–µ–¥. —Ü–µ–Ω—Ç—Ä - medcenter@kbtu.kz\n\nüè´ –î–µ–∫–∞–Ω–∞—Ç—ã:\n- –ë–∏–∑–Ω–µ—Å —à–∫–æ–ª–∞: 8 727 357 42 67 (–≤–Ω. 352, 358), e.mukashev@kbtu.kz, a.yerdebayeva@kbtu.kz\n- –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —à–∫–æ–ª–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏: 8 727 357 42 71 (–≤–Ω. 383), a.islyami@kbtu.kz, d.bisenbaeva@kbtu.kz\n- –®–∫–æ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏: 8 727 357 42 20, fit_1course@kbtu.kz\n- –®–∫–æ–ª–∞ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: 8 727 357 42 25, a.isakhov@kbtu.kz, n.eren@kbtu.kz\n- –®–∫–æ–ª–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∏ –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏: 8 727 357 42 42 (–≤–Ω. 324), a.ismailov@kbtu.kz, a.abdukarimov@kbtu.kz\n- –®–∫–æ–ª–∞ –≥–µ–æ–ª–æ–≥–∏–∏: 8 727 357 42 42 (–≤–Ω. 326), a.akhmetzhanov@kbtu.kz, g.ulkhanova@kbtu.kz\n- –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –º–æ—Ä—Å–∫–∞—è –∞–∫–∞–¥–µ–º–∏—è: 8 727 357 42 27 (–≤–Ω. 390, 392), r.biktashev@kbtu.kz, s.dlimbetova@kbtu.kz\n- –®–∫–æ–ª–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏: 8 727 291 57 84, +8 727 357 42 42 (–≤–Ω. 492), k.dzhamansarieva@kbtu.kz, n.saparbaeva@kbtu.kz\n- –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∏ –Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: 8 727 357 42 66 (–≤–Ω. 550), n.beisenkhanov@kbtu.kz, z.bugybai@kbtu.kz\n"
        await bot.send_message(message.chat.id, response_text)

    @staticmethod
    async def handle_feedback(message: types.Message, state: FSMContext):
        await bot.send_message(
            message.from_user.id,
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∂–µ —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ –Ω–µ —Ç–æ–ª—å–∫–æ OSIT –∞ —Ç–∞–∫ –∂–µ –î–µ–∫–∞–Ω–∞—Ç—É –®–ò–¢–∏–ò. –í—Å–µ –ø–∏—Å—å–º–∞ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∏ —á–∏—Ç–∞—Ç—å—Å—è. –£–¥–∞—á–∏!",
        )
        await state.set_state(BotStates.waiting_for_feedback)

    @staticmethod
    async def process_feedback(message: types.Message, state: FSMContext):
        await UserManager.save_feedback(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        await state.clear()

    @staticmethod
    async def handle_rup(message: types.Message):
        rup_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í–¢–ò–ü–û"), KeyboardButton(text="–ò–°")],
                [KeyboardButton(text="–ê–ò–£"), KeyboardButton(text="–†–ò–ú"), KeyboardButton(text="IT management")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )

        await bot.send_message(
            message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –†–£–ü:", reply_markup=rup_keyboard
        )

    @staticmethod
    async def handle_rup_options(message: types.Message):
        file_paths = {
            "–í–¢–ò–ü–û": "./rup_fit/VTIPO.pdf",
            "–ò–°": "./rup_fit/IS.pdf",
            "–†–ò–ú": "./rup_fit/RIM.pdf",
            "–ê–ò–£": "./rup_fit/AU.pdf",
            "IT management": "./rup_fit/it_man.pdf"
        }
        file_path = file_paths.get(message.text)
        if file_path:
            await bot.send_document(message.from_user.id, FSInputFile(file_path))

        await UserManager.send_main_keyboard(message.from_user.id)

    @staticmethod
    async def handle_back(message: types.Message):
        await UserManager.send_main_keyboard(message.from_user.id)

    @staticmethod
    async def ask_for_room_number(message: types.Message, state: FSMContext):
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏.")
        await state.set_state(BotStates.waiting_for_room_number)

    @staticmethod
    async def handle_room_number(message: types.Message, state: FSMContext):
        found = False
        room_mapping = {
            range(100, 144): ("–í—ã –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 1 —ç—Ç–∞–∂.", "./map/floor1/PF.png"),
            range(144, 153): ("–í—ã –Ω–∞ –¢–æ–ª–µ –ë–∏, 1 —ç—Ç–∞–∂.", "./map/floor1/TB.png"),
            range(156, 184): ("–í—ã –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 1 —ç—Ç–∞–∂.", "./map/floor1/Abl.png"),
            range(252, 285): ("–í—ã –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 2 —ç—Ç–∞–∂.", "./map/floor2/ABL.png"),
            range(202, 246): ("–í—ã –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 2 —ç—Ç–∞–∂.", "./map/floor2/PF.png"),
            range(246, 252): ("–í—ã –Ω–∞ –¢–æ–ª–µ –ë–∏, 2 —ç—Ç–∞–∂.", "./map/floor2/TB.png"),
            range(300, 344): ("–í—ã –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 3 —ç—Ç–∞–∂.", "./map/floor3/PF.png"),
            range(344, 361): ("–í—ã –Ω–∞ –¢–æ–ª–µ –ë–∏, 3 —ç—Ç–∞–∂.", "./map/floor3/TB.png"),
            range(361, 389): ("–í—ã –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 3 —ç—Ç–∞–∂.", "./map/floor3/ABL.png"),
            range(501, 523): ("–í—ã –Ω–∞ –¢–æ–ª–µ –ë–∏, 5 —ç—Ç–∞–∂.", "./map/5floor.png"),
            range(400, 417): ("–í—ã –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 4 —ç—Ç–∞–∂.", "./map/floor4/PF.png"),
            range(419, 439): ("–í—ã –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –ë–∏, 4 —ç—Ç–∞–∂.", "./map/floor4/KB.png"),
            range(444, 462): ("–í—ã –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 4 —ç—Ç–∞–∂.", "./map/floor4/ABL.png"),
            range(462, 477): ("–í—ã –Ω–∞ –¢–æ–ª–µ –ë–∏, 4 —ç—Ç–∞–∂.", "./map/floor4/TB.png"),
        }

        if message.text.isdigit():
            room_number = int(message.text)
            for room_range, (location, map_path) in room_mapping.items():
                if room_number in room_range:
                    await bot.send_message(message.from_user.id, location)
                    await bot.send_photo(message.from_user.id, FSInputFile(map_path))
                    found = True
                    break

        if not found:
            await bot.send_message(
                message.from_user.id,
                "–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            )

        await state.clear()

    @staticmethod
    async def handle_find_room(message: types.Message, state: FSMContext):
        await bot.send_message(
            message.from_user.id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n\n–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –º–µ—Å—Ç–∞ –≥–¥–µ —Ä—è–¥–æ–º –º–æ–∂–Ω–æ –ø–æ–∫—É—à–∞—Ç—å –∏–ª–∏ –∂–µ –ø–æ—É—á–∏—Ç—å—Å—è",
            reply_markup=find_keyboard,
        )
        await state.set_state(BotStates.waiting_for_find_room)

    @staticmethod
    async def process_find_room(message: types.Message, state: FSMContext):
        found = False
        location_mapping = {
            "—Ö–∞–ª—ã–∫": ("–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –±–∏, 1 —ç—Ç–∞–∂.", "./map/floor1/KB.png"),
            "–≥–µ–π–º–¥–µ–≤": ("–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –±–∏, 2 —ç—Ç–∞–∂–µ.", "./map/floor2/KB.png"),
            "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –Ω–∞ 2 —ç—Ç–∞–∂–µ": ("–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –±–∏, 2 —ç—Ç–∞–∂–µ.", "./map/floor2/KB.png"),
            "game dev": ("–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –±–∏, 2 —ç—Ç–∞–∂–µ.", "./map/floor2/KB.png"),
            "gamedev": ("–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –±–∏, 2 —ç—Ç–∞–∂–µ.", "./map/floor2/KB.png"),
            "726": ("–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –±–∏, 2 —ç—Ç–∞–∂–µ.", "./map/floor2/KB.png"),
            "—Å—Ç–æ–ª–æ–≤–∫–∞": ("–°—Ç–æ–ª–æ–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 0 —ç—Ç–∞–∂–µ –¢–æ–ª–µ –ë–∏.", "./map/floor1/Canteen.png"),
        }

        room_number_mapping = {
            "–∫—É—à–∞—Ç—å": "–°—Ç–æ–ª–æ–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 0 —ç—Ç–∞–∂–µ –¢–æ–ª–µ –ë–∏. –ö—É–ø–∏—Ç—å –ø–µ—Ä–µ–∫—É—Å –Ω–∞ 0, 1, 3 —ç—Ç–∞–∂–µ –¢–æ–ª–µ –ë–∏, –∞ —Ç–∞–∫–∂–µ –Ω–∞ 1 —ç—Ç–∞–∂–µ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞. –ï—â–µ —Ä—è–¥–æ–º —Å —É–Ω–∏–≤–µ—Ä–æ–º –µ—Å—Ç—å –º–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π, –≥–¥–µ –º–æ–∂–Ω–æ –ø–æ–∫—É—à–∞—Ç—å.",
            "—É—á–∏—Ç—å—Å—è": "–ü–æ–∫–∞ —è –Ω–µ –∑–Ω–∞—é, –≥–¥–µ –º–æ–∂–Ω–æ —É—á–∏—Ç—å—Å—è",
        }

        if message.text.isdigit():
            await MessageHandler.handle_room_number(message, state)
            found = True

        elif message.text.lower() in location_mapping:
            location, map_path = location_mapping[message.text.lower()]
            await bot.send_message(message.from_user.id, location)
            await bot.send_photo(message.from_user.id, FSInputFile(map_path))
            found = True

        elif message.text.lower() in room_number_mapping:
            response = room_number_mapping[message.text.lower()]
            await bot.send_message(message.from_user.id, response, reply_markup=main_keyboard)
            found = True

        if not found:
            await bot.send_message(
                message.from_user.id,
                "–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            )

        await state.clear()

    @staticmethod
    async def handle_chatgpt(message: types.Message, state: FSMContext):
        await bot.send_message(
            message.from_user.id, "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=chatgpt_keyboard
        )
        await state.set_state(BotStates.waiting_for_openai_question)

    @staticmethod
    async def process_openai_question(message: types.Message, state: FSMContext):
        await bot.send_message(
            message.from_user.id,
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        )
        response = await OpenAIHandler.ask_openai(message.text)
        await bot.send_message(message.from_user.id, response)
        await state.clear()

    @staticmethod
    async def handle_back(message: types.Message, state: FSMContext):
        await bot.send_message(
            message.from_user.id,
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.",
            reply_markup=main_keyboard,
        )
        await state.clear()


# Register handlers
@router.message(Command("start"))
async def start_command(message: types.Message):
    await MessageHandler.send_welcome(message)


@router.message(F.text == "–ö–∞—Ä—Ç–∞üó∫Ô∏è")
async def map_command(message: types.Message):
    await MessageHandler.handle_map(message)


@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ãüí¨")
async def contacts_command(message: types.Message):
    await MessageHandler.handle_contacts(message)


@router.message(F.text == "–ñ–∞–ª–æ–±—ã/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüì•")
async def feedback_command(message: types.Message, state: FSMContext):
    await MessageHandler.handle_feedback(message, state)


@router.message(F.text == "–†–£–ü –®–ò–¢–∏–òüìö")
async def rup_command(message: types.Message):
    await MessageHandler.handle_rup(message)


@router.message(F.text.in_({"–í–¢–ò–ü–û", "–ò–°", "–ê–ò–£", "–†–ò–ú", "IT management"}))
async def rup_option_command(message: types.Message):
    await MessageHandler.handle_rup_options(message)


@router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_command(message: types.Message, state: FSMContext):
    await MessageHandler.handle_back(message, state)


@router.message(F.text == "–ì–¥–µ –Ø?ü´£")
async def where_am_i_command(message: types.Message, state: FSMContext):
    await MessageHandler.ask_for_room_number(message, state)


@router.message(BotStates.waiting_for_room_number)
async def process_room_number_command(message: types.Message, state: FSMContext):
    await MessageHandler.handle_room_number(message, state)


@router.message(F.text == "–ù–∞–π—Ç–∏üîç")
async def find_command(message: types.Message, state: FSMContext):
    await MessageHandler.handle_find_room(message, state)


@router.message(BotStates.waiting_for_find_room)
async def process_find_room_command(message: types.Message, state: FSMContext):
    await MessageHandler.process_find_room(message, state)


@router.message(F.text == "ChatGPTü§ñ")
async def chatgpt_command(message: types.Message, state: FSMContext):
    await MessageHandler.handle_chatgpt(message, state)


@router.message(BotStates.waiting_for_openai_question)
async def process_openai_question_command(message: types.Message, state: FSMContext):
    await MessageHandler.process_openai_question(message, state)


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
